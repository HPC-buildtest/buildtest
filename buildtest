#!/bin/sh

function usage () {
   cat <<EOF
Usage: buildtest 
   -s --software 	  application name. This must match the module name

   -v --version		  application version. This must match the module version

   -m --modules		  adding extra modules prior to loading application. Use 
			  this to resolve dependencies, if it is not captured in 
			  module file

   -l --list		  List current modules in the system based on variable BTMODROOT. 
			  Check setup.sh to see the path for BTMODROOT

   -b --buildtoolchain	  The toolchain used to build the package. This refers to the EasyBuild toolchain
			  used for building the package. Check your easyconfig to see what toolchain you used. 
	
			  If a package is built with dummy toolchain don't specify this paramter. 
		          Test directory format: <software>/<version>/<toolchain>/<test>.sh
			
			  Toolchain module must be present in order for test to be created.

   -h --help   		  displays basic help

Example:
    1. 	Run test for software GCC version 5.4.0-2.27
       	
    	./buildtest -s GCC -v 5.4.0-2.27

    2. Run test for Python version 2.7.12 built with foss .2016.03  toolchain.
    	./buildtest -s Python -v 2.7.12 -b foss/.2016.03

    3.	Modules should be passed in quotation if adding multiple modules to path
    
    	./buildtest -s netCDF -v 4.4.1 -b intel/2017.01  -m "<module>/<version> <module>/version ..."

EOF
}


source ./setup.sh

software=""
version=""
depmodules=""
parameter=""
template=""
toolchain="dummy/dummy"
testname=""
compiler=""
listpkg="False"
#OPTS=`getopt -o svemptfh: --long verbose,dry-run,help,stack-size: -n 'parse-options' -- "$@"`

#echo $OPTS
#exit 1
# convert long argument names to short 
#let i=0
ARGLIST=$@
for arg in "$@"; do
  shift
  case "$arg" in
    "--software") set -- "$@" "-s" ;;
    "--version") set -- "$@" "-v" ;;
    "--list") set -- "$@" "-l" ;;
    "--modules") set -- "$@" "-m" ;;
    "--buildtoolchain") set -- "$@" "-b" ;;
    "--template") set -- "$@" "-t" ;;
    "--help") set -- "$@" "-h" ;;
    *)        set -- "$@" "$arg"
  esac
done

#sourcepkg=${ARGLIST[$((arg_index+1))]} ;; 
#OPT=`getopt -o s:v:e:m:p:t:f:h --long software:,version:,executable:,modules:,parameter:,template:,file:,help: -- "$@"`
#eval set -- "$OPT"

while getopts ":b:lhm:s:t:v:" opt; do
#while true;
  case $opt in
    b)
        toolchain=$OPTARG
        ;;
    h)
        usage
        exit 0
        ;;
    l)
	listpkg="True"
	;;
    m)
        depmodules=$OPTARG
        ;;
    s)
      	software=$OPTARG
	;;
    t)
        template=$OPTARG
        ;;
    v)
      	version=$OPTARG
      	;;
    \?)
      	echo "Invalid option: -$OPTARG" >&2
      	echo "Please run ./testgen.sh -h for a list of options"
      	exit 1
      	;;
    :)
      	echo "Option -$OPTARG requires an argument." >&2
      	exit 1
      	;;
  esac
done

compilerlist=""
mpilist=""
declare -a namelist=()
declare -a versionlist=()
declare -a compilerlist=()
declare -a compilerver=()
declare -a mpilist=()
declare -a mpiverlist=()

ret=`find $BTMODROOT -type f`
IFS=' ' read -ra modlist <<< $ret
let nameindex=0

for module in ${modlist[@]}; do
	
	#MODULETREE_CORE=`dirname $module | xargs dirname | xargs basename`
	# Modules under Compiler directory in HMNS -> pattern: Compiler/<compiler>/<compiler-ver>/<software>/<version>.lua
	MODULETREE_COMPILER=$(dirname $module | xargs dirname | xargs dirname | xargs dirname | xargs basename)

	# Modules under MPI directory in HMNS -> pattern: MPI/<compiler>/<compiler-ver>/<MPI-wrapper>/<MPI-version>/<software>/<version>.lua
	MODULETREE_MPI=$(dirname $module | xargs dirname | xargs dirname | xargs dirname | xargs dirname | xargs dirname | xargs basename)


	 namelist[$nameindex]=`dirname $module | xargs basename`
	 version_with_extension=`basename $module`
	 # strip text .lua from version
	 versionlist[$nameindex]=${version_with_extension::-4}

	 # Modules under Core directory in HMNS -> pattern: Core/<software>/<version>.lua
	 #if [ "$MODULETREE_CORE"  == "Core" ]; then
	#	compilerlist[$nameindex]="dummy"
	 #	compilerverlist[$nameindex]="dummy"
	 #fi 
	 
	 if [ "$MODULETREE_COMPILER"  == "Compiler" ]; then
		compilerpath=`dirname $module | xargs dirname `
		compilerlist[$nameindex]=`dirname $compilerpath |  xargs basename`
		compilerverlist[$nameindex]=`basename $compilerpath `
	fi
	
	# Modules under MPI directory in HMNS -> pattern: MPI/<compiler>/<compiler-ver>/<MPI-wrapper>/<MPI-version>/<software>/<version>.lua
	 if [ "$MODULETREE_MPI"  == "MPI" ]; then
	 #echo $namelist[$nameindex]
		mpipath=`dirname $module | xargs dirname`
		compilerpath=`dirname $mpipath | xargs dirname`
		mpilist[$nameindex]=`dirname $mpipath | xargs basename`
		mpiverlist[$nameindex]=`basename $mpipath`
		compilerlist[$nameindex]=`dirname $compilerpath | xargs basename`
		compilerverlist[$nameindex]=`basename $compilerpath`
	 fi
	 let "nameindex++"
done

# Show available packages and exit program. --list
if [ $listpkg == "True" ]; then
	for ((i=0; i<${#namelist[@]};i++ ));
	do
		if [ "${compilerlist[$i]}" == ""  ]; then
			echo "Software: ${namelist[$i]}/${versionlist[$i]} "
		elif [ "${mpilist[$i]}" == "" ]; then
			printf "%s\n%s\n" "Software: ${namelist[$i]}/${versionlist[$i]}" "Compiler: ${compilerlist[$i]}/${compilerverlist[$i]}"
		else
			printf "%s\n%s\n%s\n" "Software: ${namelist[$i]}/${versionlist[$i]}" "Compiler:${compilerlist[$i]}/${compilerverlist[$i]}" "MPI: ${mpilist[$i]}/${mpiverlist[$i]} "
		fi
		echo "--------------------------------------------------"
	done
	exit 0
fi

# this statement is only true if user forgets to pass -s and -v. This is required 
if [ "$software" == "" ] || [ "$version" == "" ] ; then
        echo "need to specify option -s & -v in your command"
        exit 1
fi

foundsoftware="false"
foundtoolchain="false"

export BTSRCSWDIR=$BTSRCDIR/$software
cmdfile=$BTSRCSWDIR/command.txt
generic=$BTSRCSWDIR/generic
mpidir=$BTSRCSWDIR/MPI

# extract toolchain name and version from toolchain variable. Split by / to get name and version. Format: <name>/<version>
toolchain_name=`echo $toolchain | cut -f 1 -d /`
toolchain_version=`echo $toolchain | cut -f 2 -d /`

# location where test will reside
destdir=testing/$software/$version/$toolchain_name/$toolchain_version

# verify module is present in system before adding test
for (( i=0; i < ${#namelist[@]}; i++ ));
do
	if [ "$software" == "${namelist[$i]}" ] && [ "$version" == "${versionlist[$i]}" ]; then
		foundsoftware="true"
	fi
	# only check if module exists when toolchain is specified
	if [ "$toolchain_name" == "${namelist[$i]}" ] && [ "$toolchain_version" == "${versionlist[$i]}" ]; then
                foundtoolchain="true"
        fi

	
	
done
if [ $foundsoftware == "false" ]; then
	echo "Can't find module for: $software $version"
	exit 1
fi

if [ $toolchain != "dummy/dummy" ] && [ $foundtoolchain == "false" ]; then
        echo "Can't find Toolchain module: $toolchain for: $software $version"
        exit 1
fi


# split string by space and put in array. Since multiple modules can be 
# passed we need to process each module separately
extramodules=(${depmodules// / })
 
# ensure every execution does a clean purge on the destdir before writing test.
if [ -d $destdir ]; then
	rm -rf $destdir
fi
mkdir -pv $destdir

# checking whether to add software to CMakeLists using add_subdirectory. The return code should be 0 when
# a test exists for that software and 1 when its the first test.

if [ ! -f testing/CMakeLists.txt ]; then
	echo "add_subdirectory($software)" > testing/CMakeLists.txt
else 
	grep_ret_code=`grep -w ${software} testing/CMakeLists.txt >/dev/null; echo $?`
	if [ $grep_ret_code == 1 ]; then
		echo "add_subdirectory($software)" >> testing/CMakeLists.txt
	fi
fi

# if no CMakeLists in software directory, create and add the version to CMakeLists
if [ ! -f $destdir/../../../CMakeLists.txt ]; then
	echo "add_subdirectory($version)" > $destdir/../../../CMakeLists.txt
else
	# Each software directory has individual version directory, the statement below
	# ensures cmake to find test inside the version directory
	grep_ret_code=`grep -w ${version} $destdir/../../../CMakeLists.txt >/dev/null; echo $?`
	if [ $grep_ret_code == 1 ]; then
        	echo "add_subdirectory($version)" >> $destdir/../../../CMakeLists.txt
	fi
fi

# check if there is no CMakeLists.txt in version directory, if so do a grep before adding.
if [ ! -f $destdir/../../CMakeLists.txt ]; then
        echo "add_subdirectory($toolchain_name)" > $destdir/../../CMakeLists.txt
else
	grep_ret_code=`grep -w ${toolchain_name} $destdir/../../CMakeLists.txt >/dev/null; echo $?`
	if [ $grep_ret_code == 1 ]; then
        	echo "add_subdirectory($toolchain_name)" >> $destdir/../../CMakeLists.txt
	fi
fi
# if there is no CMakeLists.txt for toolchain name directory then no need to search, just add an entry. Otherwise do a grep before adding
if [ ! -f $destdir/../CMakeLists.txt ]; then
        echo "add_subdirectory($toolchain_version)" > $destdir/../CMakeLists.txt
else
	# check if entry exists in CMakeLists.txt before adding to avoid duplicate entries
	grep_ret_code=`grep -w ${toolchain_version} $destdir/../CMakeLists.txt >/dev/null; echo $?`
	if [ $grep_ret_code == 1 ]; then
        	echo "add_subdirectory($toolchain_version)" >> $destdir/../CMakeLists.txt
	fi
fi

currentcommand="$0 $@"
#processing command.txt for each software package
if [ -f $cmdfile ]; then

	# process each command from command.txt and generate a shell script for each command and update CMakeLists.txt to add test
	while read -r cmd
	do
		executable=`echo $cmd | cut -f 1 -d " " `
		parameter=`echo $cmd | cut -f 1 -d " " `
		cp $BTTEMPLATEDIR/base.sh	$destdir/$executable.sh
		# if -b is specified then toolchain must be loaded. This is the case for packages dependent on GCC, Intel, 
		if [ "$toolchain" != "dummy/dummy" ]; then
        	        sed -i '4i module load '$toolchain $destdir/$executable.sh
	        fi
        
		sed -i 's/module=/module='$software'/g' $destdir/$executable.sh
	        sed -i 's/version=/version='$version'/g' $destdir/$executable.sh

		echo "$cmd " >> $destdir/$executable.sh
		echo "add_test(NAME $software-$version-$toolchain_name-$toolchain_version-$executable     COMMAND sh $executable.sh         WORKING_DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR})" >> $destdir/CMakeLists.txt
	
		echo "Creating Test $destdir/$executable"
	done < $cmdfile
fi
# if there are sourcefiles provided for the test then process them 
#for directory in "$BTSRCSWDIR/*";

for directory in $(ls -1 $BTSRCSWDIR);
do
	# don't process any files, only directories
	if [ ! -d $BTSRCSWDIR/$directory ]; then
		continue
	fi
	
	for file in $(ls -1 $BTSRCSWDIR/$directory);
	do

		if [ $directory == "generic" ]; then
			if [ -f $BTSRCSWDIR/generic/setup.sh ]; then
				source $BTSRCSWDIR/generic/setup.sh
			else
				source $BTSRCDIR/setup.sh
			fi
			templatefile=$BTTEMPLATEDIR/generic.sh
		elif [ $directory == "mpi" ]; then
			if [ -f $BTSRCSWDIR/mpi/setup.sh ]; then
				source $BTSRCSWDIR/mpi/setup.sh
			else
				echo "Missing file $BTSRCSWDIR/mpi/setup.sh, please create it and setup wrappers like CC, FC, CXX"
				exit 1
			fi
			templatefile=$BTTEMPLATEDIR/mpi.sh
		# if there is a custom directory use the template in src/<software>/template.sj
		elif [ $directory == "custom" ]; then
			templatefile=$BTSRCSWDIR/template.sh
		# all other directories are skipped
		else
			continue
		fi
 
		if [ $file == "setup.sh" ]; then
			continue
		fi
		# need to make test unique, in the case of two files with same name from different directories can overwrite test,
		# so adding the directory as part of the filename will fix the issue. For instance generic/hello.c and mpi/hello.c
		# will create a file generic_hello.c.sh and mpi_hello.c.sh 
		testname=$directory-$file.sh
		cp $templatefile $destdir/$testname

		ext=(`echo ${file} | cut -f2 -d.`)
                # C and cuda files extension uses $CC variable 
                if [ $ext == "c" ] || [ $ext == "cu" ]; then
                        sed -i 's/COMPILER=/COMPILER='${CC}'/g' $destdir/$testname
                elif [ $ext == "f" ]; then
                        sed -i 's/COMPILER=/COMPILER='${FC}'/g' $destdir/$testname
                elif [ $ext == "f90" ]; then
                        sed -i 's/COMPILER=/COMPILER='${F90}'/g' $destdir/$testname
                elif [ $ext == "f77" ]; then
                        sed -i 's/COMPILER=/COMPILER='${F77}'/g' $destdir/$testname
                elif [ $ext == "cpp" ]; then
                        sed -i 's/COMPILER=/COMPILER='${CXX}'/g' $destdir/$testname
                fi

                # loading toolchain module in test script if specified 
                if [ "$toolchain" != "dummy/dummy" ]; then
                        sed -i '4i module load '$toolchain $destdir/$testname
                fi

                sed -i 's/module=/module='$software'/g' $destdir/$testname
                sed -i 's/version=/version='$version'/g' $destdir/$testname



                # replace every / with \/ so that sed command can be applied properly on SOURCE tag
                sedcmd=$(echo $BTSRCSWDIR/${directory}/$file | sed  -re 's:/:\\/:g')
                sed -i 's/SOURCE=/SOURCE='$sedcmd'/g' $destdir/$testname

                echo "add_test(NAME $software-$version-$toolchain_name-$toolchain_version-$testname     COMMAND sh $testname         WORKING_DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR})" >> $destdir/CMakeLists.txt

                echo "Creating Test $destdir/$testname"
	done	
done
exit 
if [ -d $generic ]; then
	source $BTSRCSWDIR/generic/setup.sh

	files_in_generic=`ls -1 $generic`
	for file in ${files_in_generic[@]}
	do	
		# dont process the setup.sh file since that is used for setting of environment for test script
		if [ $file == "setup.sh" ]; then
			continue;
		fi
		# use the custom template inside the software directory if it exists otherwise use the generic template
		cp  $BTTEMPLATEDIR/generic.sh $destdir/${file}.sh
	
		# get name of extension file
		ext=(`echo ${file} | cut -f2 -d.`)
		# C files with .c extension, set compiler to gcc
		if [ $ext == "c" ]; then
			sed -i 's/COMPILER=/COMPILER='${CC}'/g' $destdir/${file}.sh
	        elif [ $ext == "f" ]; then
        	        sed -i 's/COMPILER=/COMPILER='${FC}'/g' $destdir/${file}.sh
		elif [ $ext == "f90" ]; then
			sed -i 's/COMPILER=/COMPILER='${F90}'/g' $destdir/${file}.sh
		elif [ $ext == "f77" ]; then
			sed -i 's/COMPILER=/COMPILER='${F77}'/g' $destdir/${file}.sh
	        elif [ $ext == "cpp" ]; then
        	        sed -i 's/COMPILER=/COMPILER='${CXX}'/g' $destdir/${file}.sh
		fi

		# loading toolchain module in test script if specified 
        	if [ "$toolchain" != "dummy/dummy" ]; then
                	sed -i '4i module load '$toolchain $destdir/${file}.sh
	        fi

		sed -i 's/module=/module='$software'/g' $destdir/${file}.sh
		sed -i 's/version=/version='$version'/g' $destdir/${file}.sh

		# replace every / with \/ so that sed command can be applied properly on SOURCE tag
		sedcmd=$(echo ${generic} | sed  -re 's:/:\\/:g')
		sed -i 's/SOURCE=/SOURCE='$sedcmd'/g' $destdir/${file}.sh
	
		echo "add_test(NAME $software-$version-$toolchain_name-$toolchain_version-$file     COMMAND sh ${file}.sh         WORKING_DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR})" >> $destdir/CMakeLists.txt

		echo "Creating Test $destdir/${file}.sh"
	
	done
fi


