Run Subcommands
==================


.. program-output:: cat scripts/run_subcommand/help.txt

Interactive Testing (``buildtest run --interactive``)
----------------------------------------------------------

buildtest comes with a menu driven test that can be used
as an alternate method to ``ctest``. Just run ``buildtest run --interactive``
after you created a few tests and follow the prompt to navigate to
the appropriate test

.. program-output:: cat scripts/how_to_use_buildtest/runtest.txt


Running Individual Tests (``buildtest run --testname``)
----------------------------------------------------------

You may run individual tests via buildtest using option ``--testname``.

::

    (buildtest-0.5.0) [siddis14@adwnode1 buildtest-framework]$ buildtest run --testname  /tmp/buildtest-tests/system/gcc/which__usr_bin_gcc.sh
    Executing Test: /tmp/buildtest-tests/system/gcc/which__usr_bin_gcc.sh >/dev/null 2>&1
    ---------------------------------------------------------
    Test Successful
    ---------------------------------------------------------


Run an Application Test Suite (``buildtest run --software``)
---------------------------------------------------------------

buildtest can run test written in ``$BUILDTEST_TESTDIR`` for a particular application
specified by option ``--software``. The choice field for this option is populated based
on directories found in ``$BUILDTEST_TESTDIR`` which were created by subsequent runs
of ``buildtest build -s <application>``.

::

    (buildtest) [siddis14@adwnode11 buildtest-framework]$ buildtest run --software
    GCC/6.4.0-2.28             GCCcore/6.4.0              Perl/5.26.0-GCCcore-6.4.0


Shown below is an output of ``buildtest run --software GCCcore/6.4.0`` which attempts
to run all tests for application ``GCCcore/6.4.0``

.. program-output:: tail -n 15 scripts/run_subcommand/app_GCCcore.txt


Run a System Package Test Suite (``buildtest run --package``)
------------------------------------------------------------------

Similarly, ``buildtest run --package`` is used to run test suite for system packages
that were built by option ``buildtest build --package <package>``

Shown below is an output of ``buildtest run --package gcc``

.. program-output:: cat scripts/run_subcommand/systempkg_gcc.txt

Running tests via CTest
-------------------------

buildtest is setup automatically  to run ctest utility. In order to use ctest you
should try to create an empty directory relative to $BUILDTEST_TESTDIR.
Assuming $BUILDTEST_TESTDIR is ``/tmp/buildtest-tests``  then you can do the following

::

    mkdir -p /tmp/build
    cd /tmp/build
    cmake ..

The output from ``cmake`` should look something like this

.. program-output:: cat scripts/run_subcommand/cmake-build.txt


There should be a file ``/tmp/CMakeLists.txt`` generated by buildtest which is used
to find all subdirectories in BUILDTEST_TESTDIR to get ctest to find and run all
the tests.

cmake will generate some make files in ``/tmp/build`` then you can run the test
by running the following

::

    ctest .


.. Note:: You want to make sure you run ``ctest .`` in the build directory since ctest will
   generate bunch of scripts in the directory you ran ``cmake``


.. program-output:: cat scripts/run_subcommand/run-GCCcore-6.4.0.txt
