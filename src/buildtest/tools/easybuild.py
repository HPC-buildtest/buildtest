"""
This module checks for easyconfig files in a module tree by searching module
files and the installation directory for .eb files.
"""

import os

from buildtest.tools.config import config_opts
from buildtest.tools.file import string_in_file, walk_tree
from buildtest.tools.modules import module_obj


def find_easyconfigs_from_modulelist(modulelist):
    """This method returns a list of easyconfig from a list of module files. The
    method invokes **walk_tree()** to traverse a directory with file extension .eb. If
    file is found it will add to easyconfig list, otherwise adds to non-easyconfig list

    :param modulelist: list of module file paths
    :type modulelist: List, required

    :return: two lists containing one that contains list of easyconfigs, second list that contains list of modulepath that dont have easyconfigs
    """

    # list to store easyconfigs
    ec_list = []
    # list to store if no easyconfigs found
    no_ec_list = []

    # look for variable root in modulefile
    search_str = "local root ="

    for module in modulelist:
        # if variable root found in module file then read file and find value
        # assigned to root to get root of software
        if string_in_file(search_str, module):
            content = open(module).readlines()
            for line in content:
                # if line starts with string "local root = <path>" then get PATH
                if line.startswith(search_str):
                    root_path = line.split()[-1]
                    root_path = root_path.replace('"', "")

                    # trying to find directory easybuild inside the root of the
                    # installation directory of an application
                    easybuild_path = os.path.join(root_path, "easybuild")
                    # if directory exist then run the find command
                    if os.path.isdir(easybuild_path):
                        eb_file = walk_tree(easybuild_path, ".eb")

                        # only add to list ec_list if there is an easyconfig file
                        if len(eb_file) > 0:
                            ec_list += eb_file
                        else:
                            no_ec_list.append(
                                f"Reading File: {module}. "
                                f"Unable to find any .eb file "
                                f"in {easybuild_path} "
                            )
                    break
                else:
                    continue
        else:
            no_ec_list.append(
                f"Reading File: {module}. "
                f"Unable to find variable root in module file. "
                f"This module is not generated by easybuild"
            )

    return ec_list, no_ec_list


def find_easyconfigs():
    """This method prints the easyconfig lists in a table format and
    this implements ``buildtest list --easyconfigs``.

    This method invokes **find_easyconfigs_from_modulelist()** that retrieves
    easyconfig and non-easyconfig list.

    This method retrieves list of module path by invoking class object
    **module_obj.get_modulefile_path()** where module_obj is an object of
    type BuildTestModule.

    Writes non-easyconfig paths to /tmp/easyconfigs.txt
    """

    modulelist = module_obj.get_modulefile_path()

    ec_list, no_ec_list = find_easyconfigs_from_modulelist(modulelist)

    # if one or more easyconfigs found then display the path to easyconfigs
    if len(ec_list) > 0:
        print(
            "List of easyconfigs found in MODULETREES: %s"
            % (config_opts["BUILDTEST_MODULEPATH"])
        )
        print
        print("ID   |  easyconfig path")
        print("{:_<4} | {:_<80}".format("", ""))
        count = 1
        for ec in ec_list:
            print(ec)
            count = count + 1
    else:
        print("No easyconfigs found!")

    if len(no_ec_list) > 0:
        fname = "/tmp/easyconfigs.txt"
        print("\n")
        print(f"buildtest was unable to find easyconfigs for {len(no_ec_list)} modules")
        print(f"Check file: {fname} for more details")
        fd = open(fname, "w")
        print("\n")
        fd.write(
            "Unable to find easyconfigs for the following, please "
            + "investigate this issue! \n"
        )

        for no_ec in no_ec_list:
            fd.write(no_ec + "\n")

        fd.close()
    print(f"Total easyconfigs found: {len(ec_list)}")
    print(f"Total module files searched: {len(modulelist)}")
